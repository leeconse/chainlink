package reportcodec

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/smartcontractkit/libocr/commontypes"
	"github.com/smartcontractkit/libocr/offchainreporting2/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_ReportCodec(t *testing.T) {
	r := EVMReportCodec{}

	t.Run("BuildReport errors if observations are empty", func(t *testing.T) {
		paos := []ParsedAttributedObservation{}
		_, err := r.BuildReport(paos)
		require.Error(t, err)
		assert.Contains(t, err.Error(), "cannot build report from empty attributed observation")
	})

	t.Run("BuildReport constructs a report from observations", func(t *testing.T) {
		paos := []ParsedAttributedObservation{
			{
				Timestamp:           uint32(42),
				BenchmarkPrice:      big.NewInt(43),
				Bid:                 big.NewInt(44),
				Ask:                 big.NewInt(45),
				CurrentBlockNum:     48,
				CurrentBlockNumHash: common.BytesToHash([]byte{47}),
				ValidFromBlockNum:   46,
				Observer:            commontypes.OracleID(49),
			},
			{
				Timestamp:           uint32(142),
				BenchmarkPrice:      big.NewInt(143),
				Bid:                 big.NewInt(144),
				Ask:                 big.NewInt(145),
				CurrentBlockNum:     148,
				CurrentBlockNumHash: common.BytesToHash([]byte{147}),
				ValidFromBlockNum:   146,
				Observer:            commontypes.OracleID(149),
			},
			{
				Timestamp:           uint32(242),
				BenchmarkPrice:      big.NewInt(243),
				Bid:                 big.NewInt(244),
				Ask:                 big.NewInt(245),
				CurrentBlockNum:     248,
				CurrentBlockNumHash: common.BytesToHash([]byte{247}),
				ValidFromBlockNum:   246,
				Observer:            commontypes.OracleID(249),
			},
			{
				Timestamp:           uint32(342),
				BenchmarkPrice:      big.NewInt(343),
				Bid:                 big.NewInt(344),
				Ask:                 big.NewInt(345),
				CurrentBlockNum:     348,
				CurrentBlockNumHash: common.BytesToHash([]byte{3, 47}),
				ValidFromBlockNum:   346,
				Observer:            commontypes.OracleID(250),
			},
		}
		rep, err := r.BuildReport(paos)
		require.NoError(t, err)

		assert.Equal(t, types.Report{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf6}, rep)
		assert.LessOrEqual(t, len(rep), r.MaxReportLength(4))
	})
}
